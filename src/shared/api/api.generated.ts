/**
 * Generated by orval v6.9.6 üç∫
 * Do not edit manually.
 * nestplate
 * The API description
 * OpenAPI spec version: 1.0
 */
import { customInstance } from './api';

export interface Tokens {
  access: string;
  refresh: string;
}

export interface AuthEmailLoginDto {
  email: string;
  password: string;
}

export interface AuthRegisterLoginDto {
  email: string;
  password: string;
  username: string;
}

export interface UpdateUserDto {
  email?: string;
  password?: string;
  username?: string;
}

export type AuthProviders = typeof AuthProviders[keyof typeof AuthProviders];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AuthProviders = {
  email: 'email',
  facebook: 'facebook',
  google: 'google',
  twitter: 'twitter',
  apple: 'apple',
  github: 'github',
} as const;

export interface User {
  id: number;
  email?: string;
  username: string;
  provider: AuthProviders;
  sessions?: Session[];
  createdAt: string;
  updatedAt: string;
  deletedAt: string;
}

export interface Session {
  id: number;
  user?: User;
  userId: number;
  ip: string;
  userAgent: string;
  os: string;
  browser: string;
  expiresIn: number;
  createdAt: string;
  updatedAt: string;
}

export interface CreateUserDto {
  email: string;
  password: string;
  username: string;
}

// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
    config: any,
    args: infer P,
  ) => any
    ? P
    : never;

/**
 * @summary Create new user
 */
export const createUser = (
  createUserDto: CreateUserDto,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<User>(
    {
      url: '/api/v1/users',
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: createUserDto,
    },
    options,
  );
};

/**
 * @summary Find all users
 */
export const findAllUsers = (

  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<User[]>(
    { url: '/api/v1/users', method: 'get' },
    options,
  );
};

/**
 * @summary Find user by id
 */
export const findUserById = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<User>(
    { url: `/api/v1/users/${id}`, method: 'get' },
    options,
  );
};

/**
 * @summary Update user by id
 */
export const updateUserById = (
  id: number,
  updateUserDto: UpdateUserDto,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<unknown>(
    {
      url: `/api/v1/users/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: updateUserDto,
    },
    options,
  );
};

/**
 * @summary Delete user by id
 */
export const deleteUserById = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<unknown>(
    { url: `/api/v1/users/${id}`, method: 'delete' },
    options,
  );
};

/**
 * @summary Find all user's sessions
 */
export const findUserSessions = (

  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Session[]>(
    { url: '/api/v1/sessions', method: 'get' },
    options,
  );
};

/**
 * @summary Delete user's session by id
 */
export const deleteUserSessionById = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<unknown>(
    { url: `/api/v1/sessions/${id}`, method: 'delete' },
    options,
  );
};

/**
 * @summary Create new user
 */
export const register = (
  authRegisterLoginDto: AuthRegisterLoginDto,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: '/api/v1/auth/register',
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: authRegisterLoginDto,
    },
    options,
  );
};

/**
 * @summary Login user
 */
export const login = (
  authEmailLoginDto: AuthEmailLoginDto,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Tokens>(
    {
      url: '/api/v1/auth/login',
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: authEmailLoginDto,
    },
    options,
  );
};

/**
 * @summary Logout user
 */
export const logout = (

  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: '/api/v1/auth/logout', method: 'post' },
    options,
  );
};

/**
 * @summary Refresh user tokens
 */
export const refresh = (

  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Tokens>(
    { url: '/api/v1/auth/refresh', method: 'post' },
    options,
  );
};

export type CreateUserResult = NonNullable<Awaited<ReturnType<typeof createUser>>>;
export type FindAllUsersResult = NonNullable<Awaited<ReturnType<typeof findAllUsers>>>;
export type FindUserByIdResult = NonNullable<Awaited<ReturnType<typeof findUserById>>>;
export type UpdateUserByIdResult = NonNullable<Awaited<ReturnType<typeof updateUserById>>>;
export type DeleteUserByIdResult = NonNullable<Awaited<ReturnType<typeof deleteUserById>>>;
export type FindUserSessionsResult = NonNullable<Awaited<ReturnType<typeof findUserSessions>>>;
export type DeleteUserSessionByIdResult = NonNullable<Awaited<ReturnType<typeof deleteUserSessionById>>>;
export type RegisterResult = NonNullable<Awaited<ReturnType<typeof register>>>;
export type LoginResult = NonNullable<Awaited<ReturnType<typeof login>>>;
export type LogoutResult = NonNullable<Awaited<ReturnType<typeof logout>>>;
export type RefreshResult = NonNullable<Awaited<ReturnType<typeof refresh>>>;
