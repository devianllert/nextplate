/**
 * Generated by orval v6.9.6 üç∫
 * Do not edit manually.
 * nestplate
 * The API description
 * OpenAPI spec version: 1.0
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse,
} from 'axios';

export interface Tokens {
  access: string;
  refresh: string;
}

export interface AuthEmailLoginDto {
  email: string;
  password: string;
}

export interface AuthRegisterLoginDto {
  email: string;
  password: string;
  username: string;
}

export interface UpdateUserDto {
  email?: string;
  password?: string;
  username?: string;
}

export type AuthProviders = typeof AuthProviders[keyof typeof AuthProviders];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AuthProviders = {
  email: 'email',
  facebook: 'facebook',
  google: 'google',
  twitter: 'twitter',
  apple: 'apple',
  github: 'github',
} as const;

export interface User {
  id: number;
  email?: string;
  username: string;
  provider: AuthProviders;
  sessions?: Session[];
  createdAt: string;
  updatedAt: string;
  deletedAt: string;
}

export interface Session {
  id: number;
  user?: User;
  userId: number;
  ip: string;
  userAgent: string;
  os: string;
  browser: string;
  expiresIn: number;
  createdAt: string;
  updatedAt: string;
}

export interface CreateUserDto {
  email: string;
  password: string;
  username: string;
}

/**
 * @summary Create new user
 */
export const createUser = <TData = AxiosResponse<User>>(
  createUserDto: CreateUserDto, options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(
    '/api/v1/users',
    createUserDto,
    options,
  );
};

/**
 * @summary Find all users
 */
export const findAllUsers = <TData = AxiosResponse<User[]>>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get('/api/v1/users', options);
};

/**
 * @summary Find user by id
 */
export const findUserById = <TData = AxiosResponse<User>>(
  id: string, options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/api/v1/users/${id}`, options);
};

/**
 * @summary Update user by id
 */
export const updateUserById = <TData = AxiosResponse<unknown>>(
  id: number,
  updateUserDto: UpdateUserDto, options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.patch(
    `/api/v1/users/${id}`,
    updateUserDto,
    options,
  );
};

/**
 * @summary Delete user by id
 */
export const deleteUserById = <TData = AxiosResponse<unknown>>(
  id: number, options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.delete(`/api/v1/users/${id}`, options);
};

/**
 * @summary Find all user's sessions
 */
export const findUserSessions = <TData = AxiosResponse<Session[]>>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get('/api/v1/sessions', options);
};

/**
 * @summary Delete user's session by id
 */
export const deleteUserSessionById = <TData = AxiosResponse<unknown>>(
  id: number, options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.delete(`/api/v1/sessions/${id}`, options);
};

/**
 * @summary Create new user
 */
export const register = <TData = AxiosResponse<void>>(
  authRegisterLoginDto: AuthRegisterLoginDto, options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(
    '/api/v1/auth/register',
    authRegisterLoginDto,
    options,
  );
};

/**
 * @summary Login user
 */
export const login = <TData = AxiosResponse<Tokens>>(
  authEmailLoginDto: AuthEmailLoginDto, options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(
    '/api/v1/auth/login',
    authEmailLoginDto,
    options,
  );
};

/**
 * @summary Logout user
 */
export const logout = <TData = AxiosResponse<void>>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post('/api/v1/auth/logout', undefined, options);
};

/**
 * @summary Refresh user tokens
 */
export const refresh = <TData = AxiosResponse<Tokens>>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post('/api/v1/auth/refresh', undefined, options);
};

export type CreateUserResult = AxiosResponse<User>;
export type FindAllUsersResult = AxiosResponse<User[]>;
export type FindUserByIdResult = AxiosResponse<User>;
export type UpdateUserByIdResult = AxiosResponse<unknown>;
export type DeleteUserByIdResult = AxiosResponse<unknown>;
export type FindUserSessionsResult = AxiosResponse<Session[]>;
export type DeleteUserSessionByIdResult = AxiosResponse<unknown>;
export type RegisterResult = AxiosResponse<void>;
export type LoginResult = AxiosResponse<Tokens>;
export type LogoutResult = AxiosResponse<void>;
export type RefreshResult = AxiosResponse<Tokens>;
